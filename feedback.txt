Sheet01(6/10)
1.1 (0/4)
Missing
1.2 (6/6)

Sheet02 (9.5/10)
2.1 (4/4)
2.2 (4/4)
2.3 (1.5/2)
Your assumptions are inconsistent. If we are paying for access time for every page when reading S, why aren't we paying it per page when reading a block from R? -0.5P

Sheet03 (9.5/10)
3.1 (3.5/4)
X key: This would make sense if Y was key, not X. -0.5P
3.2 (2/2)
3.3 (4/4)
Do not forget to update your MatrNrs next time!

Sheet04 (/10)
4.1 (1/2)
(r1⨝(r2⨝(r4⨝r3))) Would also be optimal for your example.
No cross product. A nested loop join is not a cross-product. -1P
4.2 (4/4)
Hmm, proof by induction, nice. +0P
4.3 (4/4)

Sheet 05(10/10)
5.1 (4/4)
5.2 (2/2)
5.3 (4/4)

Sheet 06(10/10)
6.1 (3/4)
For graph rooted at C: T(BA)=4, C(BA)=8, r(BA)=3/8 -0.5P
What is the result of the IKKBZ algorithm? -0.5P
6.2 (4/4)
6.3 (2/2)

Sheet 07(10/10)
7.1 (6/6)
7.2 (3/3)
7.3 (1/1)

Sheet 08(8.5/10)
8.1 (2.5/4)
{R1}, {R4} comes before {R1}, {R3}.
{R1, R2}, {R4} comes before {R1, R2}, {R3}.
Complement nodes are explored descending. -1P
{R0}, {R1,R2,R4} needs to be explored before {R0}, {R1,R2,R3}
EnumeratCsgRec() enumerates the complete neighborhood before it starts to grow subsets. -0.5P
8.2 (2/2)
The result is correct but the cost calculation seems to be erroneous:
benefit((R0 join (R3 join R2)) join R1, (R0 join R1) join (R3 join R2))
 = (250 + 500 + 100) / (20 + 250 + 100) = 850 / 370 ~= 2.297 ~= 2.3
Note how (R3 join R2) is always done before as that was decided beforehand.
No points deducted as I do not want to deduct a quarter point :)
8.3 (4/4)
